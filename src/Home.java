



import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import javax.imageio.ImageIO;
import javax.swing.*;

/**
 *
 * @author GOTHAM-PC
 */
public class Home extends javax.swing.JFrame {
    
    
    public String ip =  this.ip;
    BufferedImage img; 
    Socket soc;
    

    
    

    /**
     * Creates new form Home
     */
    public Home() {
        initComponents();
        Browse.setVisible(false);
        jLabel1.setVisible(false);
        Save.setVisible(false);
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chooser = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        Browse = new javax.swing.JButton();
        Save = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
                .addContainerGap())
        );

        Browse.setText("Browse");
        Browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseActionPerformed(evt);
            }
        });

        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Browse, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(89, 89, 89)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 96, Short.MAX_VALUE)
                        .addComponent(Save, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Save, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Browse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56))
        );

        jMenu1.setText("Connect");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Ask for Screen/ Stop Screen Stream");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Start/ Stop Server");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    boolean isStartStream = false;
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        if(isStart){
            JOptionPane.showMessageDialog(this, "Jika kamu ingin menjadi Client,kamu harus mematikan Server terlebih dahulu.");
            return;
        }
        if (!isStartStream) {
            String ip = JOptionPane.showInputDialog("Silahkan masukkan  no IP dari Servet :");
            int port = Integer.parseInt(JOptionPane.showInputDialog("Port yang anda masukkan menuju target port server"));
            if (ip != null && !ip.equals("")) {
                isStartStream = true;
                new Thread(() -> {
                    try {
                        while (isStartStream) {
                            Save.setVisible(true);
                            Browse.setVisible(false);
                            jLabel1.setVisible(false);
                            try (Socket soc = new Socket(ip, port)) {
                                BufferedImage img = ImageIO.read(soc.getInputStream());
                                ImageIcon imageIcon = new ImageIcon(img);
                                jLabel2.getGraphics().drawImage(img, 0, 0, img.getWidth(), img.getHeight(), null);
                                soc.close();
                            }
                            try {
                                Thread.sleep(10);
                            } catch (InterruptedException e) {
                            }
                            
                        }
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(null, e);
                    }
                    isStartStream = false;
                }).start();
            }else{
                JOptionPane.showMessageDialog(null, "Please enter a valid ip address.");
            }
        } else {
            isStartStream = false;
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    boolean isStart = false;
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        if(isStartStream){
            JOptionPane.showMessageDialog(this, "Jika kamu ingin menjadi Client,kamu harus mematikan Server terlebih dahulu.");
            return;
        }
        if (!isStart) {
            int port = Integer.parseInt(JOptionPane.showInputDialog("Port yang anda masukkan menuju target port server"));
            isStart = true;
            new Thread(new Runnable() {
                @Override
                public void run() {
                    try {
                        Browse.setVisible(true);
                        jLabel1.setVisible(true);
                        Save.setVisible(false);
                        ImageIcon image = new ImageIcon();
                        while (isStart) {
                            try 
                                (ServerSocket soc = new ServerSocket(port)) {
                                Socket so = soc.accept();
                                Icon ico = jLabel2.getIcon();
                                
                                BufferedImage img = new BufferedImage(ico.getIconWidth(),ico.getIconHeight(),BufferedImage.TYPE_INT_RGB);
                                //BufferedImage img = rob.createScreenCapture(new Rectangle(0, 0, (int) jLabel2.getWidth(), (int) jLabel2.getHeight()));
                                Graphics g = img.createGraphics();
                                ico.paintIcon(null, g, 0, 0);
                                ByteArrayOutputStream ous = new ByteArrayOutputStream();
                                ImageIO.write(img, "png", ous);
                                so.getOutputStream().write(ous.toByteArray());
                                so.close();
                            }
                        
                            try {
                                Thread.sleep(10);
                            } catch (InterruptedException e) {
                            }
                        }
                    } catch (IOException e) {                        
                    }
                    isStart = false;   
                }
            }).start();
            Browse.setVisible(true);
            jLabel1.setVisible(true);
            Save.setVisible(false);
            JOptionPane.showMessageDialog(this, "Server Started.");
        } else {
            isStart = false;
            JOptionPane.showMessageDialog(this, "Server Stopped.");
            Browse.setVisible(false);
            jLabel1.setVisible(false);
            Save.setVisible(false);
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        Rectangle rec = jLabel2.getBounds();
        BufferedImage jLabel2 = new BufferedImage(rec.width,rec.height,BufferedImage.TYPE_INT_ARGB);
        jPanel2.paint(jLabel2.getGraphics());
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int res = chooser.showSaveDialog(Home.this);
        
        if (res == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            
            try {
                // Writing the captured area to a png image
                ImageIO.write(jLabel2 ,"png",file);
                JOptionPane.showMessageDialog(Home.this,"The images was saved successFully!","Success",JOptionPane.INFORMATION_MESSAGE);                       
                                
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(Home.this,"The images was saved successFully!","ERROR",JOptionPane.ERROR_MESSAGE);                 
            }            
        } else {
            JOptionPane.showMessageDialog(this,"Cancelled by user !");
        }      
        
    }//GEN-LAST:event_SaveActionPerformed

    private void BrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseActionPerformed
        jLabel2.setIcon(null);  
        BufferedImage img = null;
        isStart = true;
        JFileChooser chooser = new JFileChooser();
           chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
           chooser.setFileFilter(new javax.swing.filechooser.FileFilter(){               
               @Override
               public String getDescription() {
                   return "All image Support!";
               }
               
               @Override
               public boolean accept(File f) {
                   if (f.isDirectory()) {
                       return true;
                   } else {
                       return f.getName().toLowerCase().endsWith(".png")
                               || f.getName().toLowerCase().endsWith(".jpeg")
                               || f.getName().toLowerCase().endsWith(".jpg")
                               || f.getName().toLowerCase().endsWith(".gif") 
                               || f.getName().toLowerCase().endsWith(".bmp");// lets try it
                   }
               }
             });
            int res = chooser.showOpenDialog(Home.this);
           if (res== JFileChooser.APPROVE_OPTION){
               File file = chooser.getSelectedFile();
               ImageIcon image = new ImageIcon(file.getAbsolutePath());
               Rectangle rect = jLabel2.getBounds();
               Image scaledimage = image.getImage().getScaledInstance(rect.width,rect.height,Image.SCALE_DEFAULT);
               image = new ImageIcon(scaledimage);
               jLabel2.setIcon(image);   
               jLabel1.setText(file.getAbsolutePath());
           } else {
               JOptionPane.showMessageDialog(this,"Cancelled by user!");
           }           
    
    }//GEN-LAST:event_BrowseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Browse;
    private javax.swing.JButton Save;
    private javax.swing.JFileChooser chooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
    
